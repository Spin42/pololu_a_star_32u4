# Pololu A-Star 32U4 - Test with Elixir

```elixir
# Add the dependencies
Mix.install([
  {:pololu_a_star_32u4},
  {:kino, "~> 0.12.0"}
])
```

## Kino Robot Controller

```elixir
# Robot control module with movement functions
defmodule RobotController do
  @motor_speed 150

  def move_forward do
    PololuAStar32u4.set_motors(left: @motor_speed, right: @motor_speed)
    PololuAStar32u4.set_leds(yellow: false, green: true, red: false)
    IO.puts("üîº Moving Forward")
  end

  def move_backward do
    PololuAStar32u4.set_motors(left: -@motor_speed, right: -@motor_speed)
    PololuAStar32u4.set_leds(yellow: false, green: false, red: true)
    IO.puts("üîΩ Moving Backward")
  end

  def turn_left do
    PololuAStar32u4.set_motors(left: -@motor_speed, right: @motor_speed)
    PololuAStar32u4.set_leds(yellow: true, green: false, red: false)
    IO.puts("‚óÄÔ∏è Turning Left")
  end

  def turn_right do
    PololuAStar32u4.set_motors(left: @motor_speed, right: -@motor_speed)
    PololuAStar32u4.set_leds(yellow: true, green: false, red: false)
    IO.puts("‚ñ∂Ô∏è Turning Right")
  end

  def stop do
    PololuAStar32u4.set_motors(left: 0, right: 0)
    PololuAStar32u4.set_leds(yellow: false, green: false, red: false)
    IO.puts("‚èπÔ∏è Stopped")
  end
end
```

```elixir
# Create the control interface using Kino.JS.Live
widget = Kino.JS.Live.new(:robot_controller, """
<div style="text-align: center; padding: 20px; font-family: Arial, sans-serif;">
  <h3>ü§ñ Robot Controller</h3>
  <p>Use arrow keys or WASD keys to control the robot</p>
  <p><small>Press and hold keys - robot stops when key is released</small></p>
  
  <div style="margin: 20px 0;">
    <div style="margin: 10px;">
      <button id="up-btn" style="width: 80px; height: 80px; font-size: 24px; margin: 5px; background: #4CAF50; color: white; border: none; border-radius: 10px; cursor: pointer;">
        üîº
      </button>
    </div>
    <div>
      <button id="left-btn" style="width: 80px; height: 80px; font-size: 24px; margin: 5px; background: #2196F3; color: white; border: none; border-radius: 10px; cursor: pointer;">
        ‚óÄÔ∏è
      </button>
      <button id="stop-btn" style="width: 80px; height: 80px; font-size: 24px; margin: 5px; background: #FF9800; color: white; border: none; border-radius: 10px; cursor: pointer;">
        ‚èπÔ∏è
      </button>
      <button id="right-btn" style="width: 80px; height: 80px; font-size: 24px; margin: 5px; background: #2196F3; color: white; border: none; border-radius: 10px; cursor: pointer;">
        ‚ñ∂Ô∏è
      </button>
    </div>
    <div style="margin: 10px;">
      <button id="down-btn" style="width: 80px; height: 80px; font-size: 24px; margin: 5px; background: #f44336; color: white; border: none; border-radius: 10px; cursor: pointer;">
        üîΩ
      </button>
    </div>
  </div>
  
  <div style="margin-top: 20px; font-size: 14px; color: #666;">
    <p><strong>Keyboard Controls:</strong></p>
    <p>Arrow Keys or WASD to move | Space to stop</p>
  </div>
</div>

<script>
  // Button event handlers
  function setupButton(id, direction) {
    const btn = document.getElementById(id);
    
    btn.addEventListener('mousedown', (e) => {
      e.preventDefault();
      ctx.pushEvent('key_press', direction);
    });
    
    btn.addEventListener('mouseup', (e) => {
      e.preventDefault();
      ctx.pushEvent('key_release', direction);
    });
    
    btn.addEventListener('mouseleave', (e) => {
      e.preventDefault();
      ctx.pushEvent('key_release', direction);
    });
  }

  setupButton('up-btn', 'ArrowUp');
  setupButton('down-btn', 'ArrowDown');
  setupButton('left-btn', 'ArrowLeft');
  setupButton('right-btn', 'ArrowRight');

  document.getElementById('stop-btn').addEventListener('click', () => {
    ctx.pushEvent('stop', null);
  });

  // Keyboard event handlers
  let activeKeys = new Set();

  document.addEventListener('keydown', (e) => {
    if (activeKeys.has(e.code)) return; // Prevent key repeat
    activeKeys.add(e.code);
    
    const keyMap = {
      'ArrowUp': 'ArrowUp',
      'ArrowDown': 'ArrowDown', 
      'ArrowLeft': 'ArrowLeft',
      'ArrowRight': 'ArrowRight',
      'KeyW': 'ArrowUp',
      'KeyS': 'ArrowDown',
      'KeyA': 'ArrowLeft',
      'KeyD': 'ArrowRight'
    };
    
    if (keyMap[e.code]) {
      e.preventDefault();
      ctx.pushEvent('key_press', keyMap[e.code]);
    }
    
    if (e.code === 'Space') {
      e.preventDefault();
      ctx.pushEvent('stop', null);
    }
  });

  document.addEventListener('keyup', (e) => {
    activeKeys.delete(e.code);
    
    const keyMap = {
      'ArrowUp': 'ArrowUp',
      'ArrowDown': 'ArrowDown',
      'ArrowLeft': 'ArrowLeft', 
      'ArrowRight': 'ArrowRight',
      'KeyW': 'ArrowUp',
      'KeyS': 'ArrowDown',
      'KeyA': 'ArrowLeft',
      'KeyD': 'ArrowRight'
    };
    
    if (keyMap[e.code]) {
      e.preventDefault();
      ctx.pushEvent('key_release', keyMap[e.code]);
    }
  });

  // Focus the document to capture keyboard events
  document.addEventListener('click', () => document.focus());
  document.focus();
</script>
""", fn socket, %{"type" => type, "data" => data} ->
  case type do
    "key_press" ->
      case data do
        "ArrowUp" -> RobotController.move_forward()
        "ArrowDown" -> RobotController.move_backward()
        "ArrowLeft" -> RobotController.turn_left()
        "ArrowRight" -> RobotController.turn_right()
        _ -> nil
      end
      
    "key_release" ->
      RobotController.stop()
      
    "stop" ->
      RobotController.stop()
  end
  
  {:noreply, socket}
end)

widget
```

## LED Test

```elixir
# Basic LED test
PololuAStar32u4.set_leds(yellow: true, green: false, red: false)
Process.sleep(1000)

PololuAStar32u4.set_leds(yellow: false, green: true, red: false)
Process.sleep(1000)

PololuAStar32u4.set_leds(yellow: false, green: false, red: true)
Process.sleep(1000)

# Turn off all LEDs
PololuAStar32u4.set_leds(yellow: false, green: false, red: false)
```

## Button Test

```elixir
# Read button states
buttons = PololuAStar32u4.read_buttons()
IO.inspect(buttons, label: "Button states")
```

## Battery Test

```elixir
# Read battery voltage
battery_mv = PololuAStar32u4.read_battery_mv()
battery_v = battery_mv / 1000.0
IO.puts("Battery voltage: #{battery_v}V (#{battery_mv}mV)")
```

## Motor Test

```elixir
# Motor test - WARNING: your robot will move!
# Start with low values

# Move forward slowly
PololuAStar32u4.set_motors(left: 100, right: 100)
Process.sleep(1000)

# Stop
PololuAStar32u4.set_motors(left: 0, right: 0)
Process.sleep(1000)

# Turn right
PololuAStar32u4.set_motors(left: 100, right: -100)
Process.sleep(500)

# Stop
PololuAStar32u4.set_motors(left: 0, right: 0)
```

## Analog Sensor Test

```elixir
# Read analog values
analog_values = PololuAStar32u4.read_analog()
IO.inspect(analog_values, label: "Analog values")

# Convert to percentage (0-100%)
percentages = Enum.map(analog_values, fn val -> Float.round(val / 1023 * 100, 1) end)
IO.inspect(percentages, label: "Percentages")
```

## Encoder Test

```elixir
# Read encoders
{left_enc, right_enc} = PololuAStar32u4.read_encoders()
IO.puts("Left encoder: #{left_enc}")
IO.puts("Right encoder: #{right_enc}")
```

## Audio Test

```elixir
# Play a simple melody
PololuAStar32u4.play_song("c4e4g4c5")
```

## Continuous Monitoring

```elixir
# Monitoring loop (stop the cell to stop monitoring)
defmodule RobotMonitor do
  def start do
    spawn(fn -> monitor_loop() end)
  end

  defp monitor_loop do
    # Read sensors
    buttons = PololuAStar32u4.read_buttons()
    battery = PololuAStar32u4.read_battery_mv()
    {left_enc, right_enc} = PololuAStar32u4.read_encoders()

    # Display info
    IO.puts("=== Robot Status ===")
    IO.puts("Battery: #{battery}mV")
    IO.puts("Buttons: #{inspect(buttons)}")
    IO.puts("Encoders: L=#{left_enc}, R=#{right_enc}")
    IO.puts("")

    # Wait 2 seconds
    Process.sleep(2000)

    # Continue loop
    monitor_loop()
  end
end

# Start monitoring
pid = RobotMonitor.start()
IO.puts("Monitoring started (PID: #{inspect(pid)})")
```

## Safety

```elixir
# Emergency function - stop motors
defmodule Emergency do
  def stop_all do
    PololuAStar32u4.set_motors(left: 0, right: 0)
    PololuAStar32u4.set_leds(yellow: false, green: false, red: true)
    IO.puts("üö® EMERGENCY STOP - Motors stopped!")
  end
end

# Use Emergency.stop_all() in case of problems
